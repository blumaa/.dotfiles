set nu
set autoindent
set smartindent
set cursorline
set background=dark
set laststatus=2
set nocompatible
filetype plugin on
let g:netrw_banner = 0
set incsearch
set hidden
set tabstop=2
set shiftwidth=2
set expandtab
nnoremap j gj
nnoremap k gk

call plug#begin(stdpath('data') . '/plugged')

" LSPconfig
Plug 'neovim/nvim-lspconfig'
Plug 'hrsh7th/cmp-nvim-lsp'
Plug 'hrsh7th/cmp-buffer'
Plug 'hrsh7th/cmp-path'
Plug 'hrsh7th/cmp-cmdline'
Plug 'hrsh7th/nvim-cmp'
Plug 'mattn/vim-lsp-settings'

" LSPconfig addons
Plug 'tzachar/cmp-tabnine', { 'do': './install.sh' }
Plug 'onsails/lspkind-nvim'

" Helpers
Plug 'glepnir/lspsaga.nvim'
Plug 'simrat39/symbols-outline.nvim'

Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}
Plug 'preservim/nerdtree'
Plug 'bluz71/vim-moonfly-colors'

Plug 'nvim-lua/popup.nvim'
Plug 'nvim-telescope/telescope-fzy-native.nvim'

" Telescope requirements...
Plug 'nvim-lua/popup.nvim'
Plug 'nvim-lua/plenary.nvim'
Plug 'nvim-telescope/telescope.nvim'
Plug 'nvim-telescope/telescope-fzy-native.nvim'

Plug 'sbdchd/neoformat'
Plug 'mfussenegger/nvim-lint'
" Plug 'prettier/vim-prettier', { 'do': 'yarn install' }

Plug 'tpope/vim-fugitive'

Plug 'mhinz/vim-signify'
Plug 'ThePrimeagen/git-worktree.nvim'

Plug 'itchyny/lightline.vim'

Plug 'yuezk/vim-js'
Plug 'maxmellon/vim-jsx-pretty'

Plug 'Yggdroot/indentLine'

Plug 'saadparwaiz1/cmp_luasnip'
Plug 'L3MON4D3/LuaSnip'
Plug 'rafamadriz/friendly-snippets'

call plug#end()

let g:lightline = {
      \ 'colorscheme': 'wombat',
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'gitbranch', 'readonly', 'filename', 'modified' ] ]
      \ },
      \ 'component_function': {
      \   'filename': 'LightlineFilename',
      \   'gitbranch': 'FugitiveHead'
      \ },
      \ }

function! LightlineFilename()
  let root = fnamemodify(get(b:, 'git_dir'), ':h')
  let path = expand('%:p')
  if path[:len(root)-1] ==# root
    return path[len(root)+1:]
  endif
  return expand('%')
endfunction

if (has("termguicolors"))
 set termguicolors
endif

" set background=dark
colorscheme moonfly 
" syntax on
set laststatus=2

let g:airline_theme='luna'
let mapleader = " "

nnoremap <leader>n :NERDTreeFocus<CR>
nnoremap <C-n> :NERDTree<CR>
nnoremap <C-t> :NERDTreeToggle<CR>
nnoremap <C-f> :NERDTreeFind<CR>

nnoremap <leader>ff <cmd>Telescope find_files<cr>
nnoremap <leader>fg <cmd>Telescope live_grep<cr>
nnoremap <leader>fb <cmd>Telescope buffers<cr>
nnoremap <leader>fh <cmd>Telescope help_tags<cr>
nnoremap <esc> :noh <CR>


" set completeopt=menu,menuone,noselect

"  lua <<EOF
"  -- Add additional capabilities supported by nvim-cmp
"  local capabilities = vim.lsp.protocol.make_client_capabilities()
"  capabilities = require('cmp_nvim_lsp').update_capabilities(capabilities)
"
"  local lspconfig = require('lspconfig')
"
"  -- Enable some language servers with the additional completion capabilities offered by nvim-cmp
"  local servers = { 'bashls', 'solargraph', 'yamlls', 'vimls', 'tsserver' }
"  for _, lsp in ipairs(servers) do
"    lspconfig[lsp].setup {
"      -- on_attach = my_custom_on_attach,
"      capabilities = capabilities,
"    }
"  end
"
"  -- luasnip setup
"  local luasnip = require 'luasnip'
"
"  -- nvim-cmp setup
"  local cmp = require 'cmp'
"  -- lspkind init
"  local lspkind = require("lspkind")
"  require('lspkind').init({
"      with_text = true,
"  })
"  local source_mapping = {
"    buffer = "[Buffer]",
"    nvim_lsp = "[LSP]",
"    nvim_lua = "[Lua]",
"    cmp_tabnine = "[TN]",
"    path = "[Path]",
"  }
"  cmp.setup {
"    snippet = {
"      expand = function(args)
"        require('luasnip').lsp_expand(args.body)
"      end,
"    },
"    mapping = {
"      ['<C-p>'] = cmp.mapping.select_prev_item(),
"      ['<C-n>'] = cmp.mapping.select_next_item(),
"      ['<C-d>'] = cmp.mapping.scroll_docs(-4),
"      ['<C-f>'] = cmp.mapping.scroll_docs(4),
"      ['<C-Space>'] = cmp.mapping.complete(),
"      ['<C-e>'] = cmp.mapping.close(),
"      ['<CR>'] = cmp.mapping.confirm {
"        behavior = cmp.ConfirmBehavior.Replace,
"        select = true,
"      },
"      ['<Tab>'] = function(fallback)
"        if cmp.visible() then
"          cmp.select_next_item()
"        elseif luasnip.expand_or_jumpable() then
"          luasnip.expand_or_jump()
"        else
"          fallback()
"        end
"      end,
"      ['<S-Tab>'] = function(fallback)
"        if cmp.visible() then
"          cmp.select_prev_item()
"        elseif luasnip.jumpable(-1) then
"          luasnip.jump(-1)
"        else
"          fallback()
"        end
"      end,
"    },
"    formatting = {
"         format = function(entry, vim_item)
"             vim_item.kind = lspkind.presets.default[vim_item.kind]
"             local menu = source_mapping[entry.source.name]
"             if entry.source.name == 'cmp_tabnine' then
"                 if entry.completion_item.data ~= nil and entry.completion_item.data.detail ~= nil then
"                     menu = entry.completion_item.data.detail .. ' ' .. menu
"                 end
"                 vim_item.kind = 'ÔÉß'
"             end
"             vim_item.menu = menu
"             return vim_item
"         end
"     },
"    sources = {
"      { name = 'cmp_tabnine' },
"      { name = 'nvim_lsp' },
"      { name = 'luasnip' },
"      { name = 'buffer' },
"    },
"  }
"
"  require'lspconfig'.eslint.setup{}
"
"  -- Mappings.
"    -- See `:help vim.lsp.*` for documentation on any of the below functions
"  --  vim.api.nvim_buf_set_keymap(bufnr, 'n', 'gD', '<cmd>lua vim.lsp.buf.declaration()<CR>', opts)
"  --  vim.api.nvim_buf_set_keymap(bufnr, 'n', 'gd', '<cmd>lua vim.lsp.buf.definition()<CR>', opts)
"  --  vim.api.nvim_buf_set_keymap(bufnr, 'n', 'K', '<cmd>lua vim.lsp.buf.hover()<CR>', opts)
"  --  vim.api.nvim_buf_set_keymap(bufnr, 'n', 'gi', '<cmd>lua vim.lsp.buf.implementation()<CR>', opts)
"  --  vim.api.nvim_buf_set_keymap(bufnr, 'n', '<C-k>', '<cmd>lua vim.lsp.buf.signature_help()<CR>', opts)
"  --  vim.api.nvim_buf_set_keymap(bufnr, 'n', '<space>wa', '<cmd>lua vim.lsp.buf.add_workspace_folder()<CR>', opts)
"  --  vim.api.nvim_buf_set_keymap(bufnr, 'n', '<space>wr', '<cmd>lua vim.lsp.buf.remove_workspace_folder()<CR>', opts)
"  --  vim.api.nvim_buf_set_keymap(bufnr, 'n', '<space>wl', '<cmd>lua print(vim.inspect(vim.lsp.buf.list_workspace_folders()))<CR>', opts)
"  --  vim.api.nvim_buf_set_keymap(bufnr, 'n', '<space>D', '<cmd>lua vim.lsp.buf.type_definition()<CR>', opts)
"  --  vim.api.nvim_buf_set_keymap(bufnr, 'n', '<space>rn', '<cmd>lua vim.lsp.buf.rename()<CR>', opts)
"  --  vim.api.nvim_buf_set_keymap(bufnr, 'n', '<space>ca', '<cmd>lua vim.lsp.buf.code_action()<CR>', opts)
"  --  vim.api.nvim_buf_set_keymap(bufnr, 'n', 'gr', '<cmd>lua vim.lsp.buf.references()<CR>', opts)
"
"  EOF


